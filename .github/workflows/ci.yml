name: CI
# on: [push, pull_request]
on: [workflow_dispatch]

jobs:
  check-format:
    name: Check formatting
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: sudo apt-get install -y clang-format
      - name: Check formatting
        run: bash .github/workflows/check-format.sh

  build:
    name: Build ${{ matrix.os }} llvm-${{ matrix.llvm }} ${{ matrix.compiler }} ${{ matrix.build_type }}
    runs-on: ${{ matrix.os }}
    needs: [check-format]
    env:
      LLVM_VERSION: ${{ matrix.llvm }}
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11.0]
        compiler: [gcc, clang]
        build_type: [Release, Debug]
        llvm: [11, 12]
        exclude:
          - os: macos-11.0
            compiler: gcc

    steps:
      - uses: actions/checkout@v2
      - name: Install dependencies
        run: bash .github/workflows/install-deps.sh
      - name: Set LLVM_DIR
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" =~ ubuntu-.* ]]; then
            echo LLVM_DIR=/usr/lib/llvm-${{ matrix.llvm }}/lib/cmake/llvm >>$GITHUB_ENV
          elif [[ "${{ matrix.os }}" =~ macos-.* ]]; then
            echo LLVM_DIR=$PWD/llvm-${LLVM_VERSION}/lib/cmake/llvm >>$GITHUB_ENV
          fi
      - name: Set compiler
        shell: bash
        run: |
          if [ "${{ matrix.compiler }}" == "gcc" ]; then
            echo CC=gcc >>$GITHUB_ENV
            echo CXX=g++ >>$GITHUB_ENV
          elif [ "${{ matrix.compiler }}" == "clang" ]; then
            echo CC=clang >>$GITHUB_ENV
            echo CXX=clang++ >>$GITHUB_ENV
          fi
      - name: Create build dir
        run: cmake -E make_directory build
      - name: CMake
        run: >
          cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                   -DLLVM_DIR="$LLVM_DIR"
        working-directory: build
      - name: Build
        run: cmake --build . --config ${{ matrix.build_type }}
        working-directory: build
      - name: Test
        run: ctest -C ${{ matrix.build_type }} --output-on-failure
        working-directory: build

  build-windows:
    name: Build ${{ matrix.platform }} llvm-${{ matrix.llvm }}
    runs-on: windows-2019
    needs: [check-format]
    env:
      LLVM_VERSION: ${{ matrix.llvm }}
      BUILD_PLATFORM: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [Win32, x64]
        llvm: [11, 12]

    steps:
      - uses: actions/checkout@v2
      - name: cache-llvm
        uses: actions/cache@v2
        with:
          path: llvm-${{ matrix.llvm }}
          key: llvm-${{ matrix.llvm }}-${{ matrix.platform }}
      - name: Install dependencies
        run: bash .github/workflows/install-deps.sh
      - name: Create build dir
        run: cmake -E make_directory build
      - name: CMake
        shell: bash
        run: >
          cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.platform }}
          -DLLVM_DIR=$PWD/../llvm-${{ matrix.llvm }}/install/lib/cmake/llvm
        working-directory: build
      - name: Build
        run: cmake --build . --config Release --target ALL_BUILD
        working-directory: build
      - name: Test
        run: >
          cmake --build . --config Release --target RUN_TESTS --output-on-failure ;
          cat ./Testing/Temporary/LastTest.log
        working-directory: build
